{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-return-assign */\n// 액션 선언\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE_CHECK = 'todos/TOGGLE_CHECK';\nconst REMOVE = 'todos/REMOVE';\nlet id = 0;\nexport const changeInput = input => ({\n  type: CHANGE_INPUT,\n  payload: input\n});\nexport const insert = text => ({\n  type: INSERT,\n  payload: {\n    id: ++id,\n    text\n  }\n});\nexport const toggleCheck = id => ({\n  type: TOGGLE_CHECK,\n  payload: id\n});\nexport const remove = id => ({\n  type: REMOVE,\n  payload: id\n});\nconst initialState = {\n  input: '',\n  todos: []\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return _objectSpread({}, state, {\n        input: action.payload\n      });\n\n    case INSERT:\n      return _objectSpread({}, state, {\n        todos: state.todos.concat(_objectSpread({}, action.payload, {\n          done: false\n        }))\n      });\n\n    case TOGGLE_CHECK:\n      return _objectSpread({}, state, {\n        todos: state.todos.map(todo => todo.id === action.payload ? _objectSpread({}, todo, {\n          done: !todo.done\n        }) : todo)\n      });\n\n    case REMOVE:\n      return _objectSpread({}, state, {\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["D:/Desktop/blog_project/redux/reducers/todosRecuder.jsx"],"names":["CHANGE_INPUT","INSERT","TOGGLE_CHECK","REMOVE","id","changeInput","input","type","payload","insert","text","toggleCheck","remove","initialState","todos","state","action","concat","done","map","todo","filter"],"mappings":";;;;;;AAAA;;AACA;;AACA;AACA;AACA,MAAMA,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AAEA,IAAIC,EAAE,GAAG,CAAT;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,KAAY;AAAEC,EAAAA,IAAI,EAAEP,YAAR;AAAsBQ,EAAAA,OAAO,EAAEF;AAA/B,CAAZ,CAApB;AACP,OAAO,MAAMG,MAAM,GAAIC,IAAD,KAAW;AAC/BH,EAAAA,IAAI,EAAEN,MADyB;AAE/BO,EAAAA,OAAO,EAAE;AACPJ,IAAAA,EAAE,EAAE,EAAEA,EADC;AAEPM,IAAAA;AAFO;AAFsB,CAAX,CAAf;AAOP,OAAO,MAAMC,WAAW,GAAIP,EAAD,KAAS;AAAEG,EAAAA,IAAI,EAAEL,YAAR;AAAsBM,EAAAA,OAAO,EAAEJ;AAA/B,CAAT,CAApB;AACP,OAAO,MAAMQ,MAAM,GAAIR,EAAD,KAAS;AAAEG,EAAAA,IAAI,EAAEJ,MAAR;AAAgBK,EAAAA,OAAO,EAAEJ;AAAzB,CAAT,CAAf;AAEP,MAAMS,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,EADY;AAEnBQ,EAAAA,KAAK,EAAE;AAFY,CAArB;;AAIA,MAAMA,KAAK,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACT,IAAf;AACE,SAAKP,YAAL;AACE,+BACKe,KADL;AAEET,QAAAA,KAAK,EAAEU,MAAM,CAACR;AAFhB;;AAIF,SAAKP,MAAL;AACE,+BACKc,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYG,MAAZ,mBAAwBD,MAAM,CAACR,OAA/B;AAAwCU,UAAAA,IAAI,EAAE;AAA9C;AAFT;;AAIF,SAAKhB,YAAL;AACE,+BACKa,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,GAAZ,CAAiBC,IAAD,IACrBA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACR,OAAnB,qBAEOY,IAFP;AAGIF,UAAAA,IAAI,EAAE,CAACE,IAAI,CAACF;AAHhB,aAKIE,IANC;AAFT;;AAWF,SAAKjB,MAAL;AACE,+BACKY,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYO,MAAZ,CAAoBD,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACR,OAAhD;AAFT;;AAIF;AACE,aAAOO,KAAP;AA7BJ;AA+BD,CAhCD;;AAkCA,eAAeD,KAAf","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable no-plusplus */\r\n/* eslint-disable no-return-assign */\r\n// 액션 선언\r\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE_CHECK = 'todos/TOGGLE_CHECK';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\nlet id = 0;\r\n\r\nexport const changeInput = (input) => ({ type: CHANGE_INPUT, payload: input });\r\nexport const insert = (text) => ({\r\n  type: INSERT,\r\n  payload: {\r\n    id: ++id,\r\n    text,\r\n  },\r\n});\r\nexport const toggleCheck = (id) => ({ type: TOGGLE_CHECK, payload: id });\r\nexport const remove = (id) => ({ type: REMOVE, payload: id });\r\n\r\nconst initialState = {\r\n  input: '',\r\n  todos: []\r\n};\r\nconst todos = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_INPUT:\r\n      return {\r\n        ...state,\r\n        input: action.payload,\r\n      };\r\n    case INSERT:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.concat({ ...action.payload, done: false })\r\n      };\r\n    case TOGGLE_CHECK:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => (\r\n          todo.id === action.payload\r\n            ? {\r\n              ...todo,\r\n              done: !todo.done,\r\n            }\r\n            : todo\r\n        )),\r\n      };\r\n    case REMOVE:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n"]},"metadata":{},"sourceType":"module"}