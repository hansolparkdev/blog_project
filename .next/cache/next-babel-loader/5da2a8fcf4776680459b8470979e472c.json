{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-return-assign */\n// 액션 선언\nvar CHANGE_INPUT = 'todos/CHANGE_INPUT';\nvar INSERT = 'todos/INSERT';\nvar TOGGLE_CHECK = 'todos/TOGGLE_CHECK';\nvar REMOVE = 'todos/REMOVE';\nvar id = 0;\nexport var changeInput = function changeInput(input) {\n  return {\n    type: CHANGE_INPUT,\n    payload: input\n  };\n};\nexport var insert = function insert(text) {\n  return {\n    type: INSERT,\n    payload: {\n      id: ++id,\n      text: text\n    }\n  };\n};\nexport var toggleCheck = function toggleCheck(id) {\n  return {\n    type: TOGGLE_CHECK,\n    payload: id\n  };\n};\nexport var remove = function remove(id) {\n  return {\n    type: REMOVE,\n    payload: id\n  };\n};\nvar initialState = {\n  input: '',\n  todos: []\n};\n\nvar todos = function todos() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return _objectSpread({}, state, {\n        input: action.payload\n      });\n\n    case INSERT:\n      return _objectSpread({}, state, {\n        todos: state.todos.concat(_objectSpread({}, action.payload, {\n          done: false\n        }))\n      });\n\n    case TOGGLE_CHECK:\n      return _objectSpread({}, state, {\n        todos: state.todos.map(function (todo) {\n          return todo.id === action.payload ? _objectSpread({}, todo, {\n            done: !todo.done\n          }) : todo;\n        })\n      });\n\n    case REMOVE:\n      return _objectSpread({}, state, {\n        todos: state.todos.filter(function (todo) {\n          return todo.id !== action.payload;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;","map":{"version":3,"sources":["D:/Desktop/blog_project/redux/reducers/todosRecuder.jsx"],"names":["CHANGE_INPUT","INSERT","TOGGLE_CHECK","REMOVE","id","changeInput","input","type","payload","insert","text","toggleCheck","remove","initialState","todos","state","action","concat","done","map","todo","filter"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;AACA;AACA,IAAMA,YAAY,GAAG,oBAArB;AACA,IAAMC,MAAM,GAAG,cAAf;AACA,IAAMC,YAAY,GAAG,oBAArB;AACA,IAAMC,MAAM,GAAG,cAAf;AAEA,IAAIC,EAAE,GAAG,CAAT;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAY;AAAEC,IAAAA,IAAI,EAAEP,YAAR;AAAsBQ,IAAAA,OAAO,EAAEF;AAA/B,GAAZ;AAAA,CAApB;AACP,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;AAAA,SAAW;AAC/BH,IAAAA,IAAI,EAAEN,MADyB;AAE/BO,IAAAA,OAAO,EAAE;AACPJ,MAAAA,EAAE,EAAE,EAAEA,EADC;AAEPM,MAAAA,IAAI,EAAJA;AAFO;AAFsB,GAAX;AAAA,CAAf;AAOP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACP,EAAD;AAAA,SAAS;AAAEG,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEJ;AAA/B,GAAT;AAAA,CAApB;AACP,OAAO,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACR,EAAD;AAAA,SAAS;AAAEG,IAAAA,IAAI,EAAEJ,MAAR;AAAgBK,IAAAA,OAAO,EAAEJ;AAAzB,GAAT;AAAA,CAAf;AAEP,IAAMS,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,EADY;AAEnBQ,EAAAA,KAAK,EAAE;AAFY,CAArB;;AAIA,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC9C,UAAQA,MAAM,CAACT,IAAf;AACE,SAAKP,YAAL;AACE,+BACKe,KADL;AAEET,QAAAA,KAAK,EAAEU,MAAM,CAACR;AAFhB;;AAIF,SAAKP,MAAL;AACE,+BACKc,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYG,MAAZ,mBAAwBD,MAAM,CAACR,OAA/B;AAAwCU,UAAAA,IAAI,EAAE;AAA9C;AAFT;;AAIF,SAAKhB,YAAL;AACE,+BACKa,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,GAAZ,CAAgB,UAACC,IAAD;AAAA,iBACrBA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACR,OAAnB,qBAEOY,IAFP;AAGIF,YAAAA,IAAI,EAAE,CAACE,IAAI,CAACF;AAHhB,eAKIE,IANiB;AAAA,SAAhB;AAFT;;AAWF,SAAKjB,MAAL;AACE,+BACKY,KADL;AAEED,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYO,MAAZ,CAAmB,UAACD,IAAD;AAAA,iBAAUA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACR,OAA7B;AAAA,SAAnB;AAFT;;AAIF;AACE,aAAOO,KAAP;AA7BJ;AA+BD,CAhCD;;AAkCA,eAAeD,KAAf","sourcesContent":["/* eslint-disable no-shadow */\r\n/* eslint-disable no-plusplus */\r\n/* eslint-disable no-return-assign */\r\n// 액션 선언\r\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE_CHECK = 'todos/TOGGLE_CHECK';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\nlet id = 0;\r\n\r\nexport const changeInput = (input) => ({ type: CHANGE_INPUT, payload: input });\r\nexport const insert = (text) => ({\r\n  type: INSERT,\r\n  payload: {\r\n    id: ++id,\r\n    text,\r\n  },\r\n});\r\nexport const toggleCheck = (id) => ({ type: TOGGLE_CHECK, payload: id });\r\nexport const remove = (id) => ({ type: REMOVE, payload: id });\r\n\r\nconst initialState = {\r\n  input: '',\r\n  todos: []\r\n};\r\nconst todos = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_INPUT:\r\n      return {\r\n        ...state,\r\n        input: action.payload,\r\n      };\r\n    case INSERT:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.concat({ ...action.payload, done: false })\r\n      };\r\n    case TOGGLE_CHECK:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => (\r\n          todo.id === action.payload\r\n            ? {\r\n              ...todo,\r\n              done: !todo.done,\r\n            }\r\n            : todo\r\n        )),\r\n      };\r\n    case REMOVE:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n"]},"metadata":{},"sourceType":"module"}