{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\n\nfunction getPostAPI(postId) {\n  console.log(postId);\n  return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\n  return axios.get('../');\n}\n\nconst initialState = {\n  pending: false,\n  error: false,\n  data: {\n    title: '',\n    body: ''\n  }\n};\nconst GET_POST_PENDING = 'GET_POST_PENDING';\nconst GET_POST_SUCCESS = 'GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'GET_POST_FAILURE';\nexport const getPost = postId => dispatch => {\n  // 먼저, 요청이 시작했다는것을 알립니다\n  console.log('test');\n  dispatch({\n    type: GET_POST_PENDING\n  }); // 요청을 시작합니다\n  // 여기서 만든 promise 를 return 해줘야, 나중에 컴포넌트에서 호출 할 때 getPost().then(...) 을 할 수 있습니다\n\n  return getPostAPI(postId).then(response => {\n    // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\n    console.log(response);\n    dispatch({\n      type: GET_POST_SUCCESS,\n      payload: response\n    });\n  }).catch(error => {\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\n    console.log(error);\n    dispatch({\n      type: GET_POST_FAILURE,\n      payload: error\n    });\n  });\n};\n\nconst handleAction = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POST_PENDING:\n      {\n        return _objectSpread({}, state, {\n          pending: true,\n          error: false\n        });\n      }\n\n    case GET_POST_SUCCESS:\n      {\n        const {\n          title,\n          body\n        } = action.payload.data;\n        return _objectSpread({}, state, {\n          pending: false,\n          data: {\n            title,\n            body\n          }\n        });\n      }\n\n    case GET_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          pending: false,\n          error: true\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default handleAction;","map":{"version":3,"sources":["D:/Desktop/blog_project/redux/reducers/post.js"],"names":["axios","getPostAPI","postId","console","log","get","initialState","pending","error","data","title","body","GET_POST_PENDING","GET_POST_SUCCESS","GET_POST_FAILURE","getPost","dispatch","type","then","response","payload","catch","handleAction","state","action"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOF,KAAK,CAACK,GAAN,CAAW,8CAA6CH,MAAO,EAA/D,CAAP;AACA,SAAOF,KAAK,CAACK,GAAN,CAAU,KAAV,CAAP;AACD;;AAED,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,IAAI,EAAE;AAFF;AAHa,CAArB;AASA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAIb,MAAD,IAAac,QAAD,IAAc;AAC/C;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAY,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR,CAH+C,CAK/C;AACA;;AACA,SAAOX,UAAU,CAACC,MAAD,CAAV,CAAmBgB,IAAnB,CACJC,QAAD,IAAc;AACZ;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACAH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBADC;AAEPO,MAAAA,OAAO,EAAED;AAFF,KAAD,CAAR;AAID,GARI,EASLE,KATK,CASEb,KAAD,IAAW;AACjB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAQ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,gBADC;AAEPM,MAAAA,OAAO,EAAEZ;AAFF,KAAD,CAAR;AAID,GAhBM,CAAP;AAiBD,CAxBM;;AA0BP,MAAMc,YAAY,GAAG,CAACC,KAAK,GAAGjB,YAAT,EAAuBkB,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACP,IAAf;AACE,SAAKL,gBAAL;AAAuB;AACrB,iCACKW,KADL;AAEEhB,UAAAA,OAAO,EAAE,IAFX;AAGEC,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD,SAAKK,gBAAL;AAAuB;AACrB,cAAM;AAAEH,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAkBa,MAAM,CAACJ,OAAP,CAAeX,IAAvC;AACA,iCACKc,KADL;AAEEhB,UAAAA,OAAO,EAAE,KAFX;AAGEE,UAAAA,IAAI,EAAE;AACJC,YAAAA,KADI;AACGC,YAAAA;AADH;AAHR;AAOD;;AACD,SAAKG,gBAAL;AAAuB;AACrB,iCACKS,KADL;AAEEhB,UAAAA,OAAO,EAAE,KAFX;AAGEC,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD;AAAS;AACP,iCAAYe,KAAZ;AACD;AA3BH;AA6BD,CA9BD;;AAgCA,eAAeD,YAAf","sourcesContent":["import axios from 'axios';\r\n\r\nfunction getPostAPI(postId) {\r\n  console.log(postId);\r\n  return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\r\n  return axios.get('../');\r\n}\r\n\r\nconst initialState = {\r\n  pending: false,\r\n  error: false,\r\n  data: {\r\n    title: '',\r\n    body: '',\r\n  },\r\n};\r\n\r\nconst GET_POST_PENDING = 'GET_POST_PENDING';\r\nconst GET_POST_SUCCESS = 'GET_POST_SUCCESS';\r\nconst GET_POST_FAILURE = 'GET_POST_FAILURE';\r\n\r\nexport const getPost = (postId) => (dispatch) => {\r\n  // 먼저, 요청이 시작했다는것을 알립니다\r\n  console.log('test');\r\n  dispatch({ type: GET_POST_PENDING });\r\n\r\n  // 요청을 시작합니다\r\n  // 여기서 만든 promise 를 return 해줘야, 나중에 컴포넌트에서 호출 할 때 getPost().then(...) 을 할 수 있습니다\r\n  return getPostAPI(postId).then(\r\n    (response) => {\r\n      // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\r\n      console.log(response);\r\n      dispatch({\r\n        type: GET_POST_SUCCESS,\r\n        payload: response,\r\n      });\r\n    },\r\n  ).catch((error) => {\r\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\r\n    console.log(error);\r\n    dispatch({\r\n      type: GET_POST_FAILURE,\r\n      payload: error,\r\n    });\r\n  });\r\n};\r\n\r\nconst handleAction = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_POST_PENDING: {\r\n      return {\r\n        ...state,\r\n        pending: true,\r\n        error: false,\r\n      };\r\n    }\r\n    case GET_POST_SUCCESS: {\r\n      const { title, body } = action.payload.data;\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: {\r\n          title, body,\r\n        },\r\n      };\r\n    }\r\n    case GET_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: true,\r\n      };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n};\r\n\r\nexport default handleAction;\r\n"]},"metadata":{},"sourceType":"module"}