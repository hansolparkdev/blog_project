{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\n\nfunction getPostAPI(postId) {// console.log(postId);\n  // return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\n  // return axios.get('../');\n}\n\nvar initialState = {\n  pending: false,\n  error: false,\n  data: {\n    title: '',\n    body: ''\n  }\n};\nvar GET_POST_PENDING = 'GET_POST_PENDING';\nvar GET_POST_SUCCESS = 'GET_POST_SUCCESS';\nvar GET_POST_FAILURE = 'GET_POST_FAILURE';\nexport var getPost = function getPost(postId) {\n  return function (dispatch) {\n    // 먼저, 요청이 시작했다는것을 알립니다\n    console.log('test');\n    dispatch({\n      type: GET_POST_PENDING\n    }); // 요청을 시작합니다\n    // 여기서 만든 promise 를 return 해줘야, 나중에 컴포넌트에서 호출 할 때 getPost().then(...) 을 할 수 있습니다\n\n    return getPostAPI(postId).then(function (response) {\n      // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\n      console.log(response);\n      dispatch({\n        type: GET_POST_SUCCESS,\n        payload: response\n      });\n    })[\"catch\"](function (error) {\n      // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\n      console.log(error);\n      dispatch({\n        type: GET_POST_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\n\nvar handleAction = function handleAction() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POST_PENDING:\n      {\n        return _objectSpread({}, state, {\n          pending: true,\n          error: false\n        });\n      }\n\n    case GET_POST_SUCCESS:\n      {\n        var _action$payload$data = action.payload.data,\n            title = _action$payload$data.title,\n            body = _action$payload$data.body;\n        return _objectSpread({}, state, {\n          pending: false,\n          data: {\n            title: title,\n            body: body\n          }\n        });\n      }\n\n    case GET_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          pending: false,\n          error: true\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default handleAction;","map":{"version":3,"sources":["D:/Desktop/blog_project/redux/reducers/post.js"],"names":["axios","getPostAPI","postId","initialState","pending","error","data","title","body","GET_POST_PENDING","GET_POST_SUCCESS","GET_POST_FAILURE","getPost","dispatch","console","log","type","then","response","payload","handleAction","state","action"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4B,CAC1B;AACA;AACA;AACD;;AAED,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,IAAI,EAAE;AAFF;AAHa,CAArB;AASA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACV,MAAD;AAAA,SAAY,UAACW,QAAD,EAAc;AAC/C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR,CAH+C,CAK/C;AACA;;AACA,WAAOR,UAAU,CAACC,MAAD,CAAV,CAAmBe,IAAnB,CACL,UAACC,QAAD,EAAc;AACZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAL,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEN,gBADC;AAEPS,QAAAA,OAAO,EAAED;AAFF,OAAD,CAAR;AAID,KARI,WASC,UAACb,KAAD,EAAW;AACjB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACAQ,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,gBADC;AAEPQ,QAAAA,OAAO,EAAEd;AAFF,OAAD,CAAR;AAID,KAhBM,CAAP;AAiBD,GAxBsB;AAAA,CAAhB;;AA0BP,IAAMe,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBlB,YAAyB;AAAA,MAAXmB,MAAW;;AACrD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKP,gBAAL;AAAuB;AACrB,iCACKY,KADL;AAEEjB,UAAAA,OAAO,EAAE,IAFX;AAGEC,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD,SAAKK,gBAAL;AAAuB;AAAA,mCACGY,MAAM,CAACH,OAAP,CAAeb,IADlB;AAAA,YACbC,KADa,wBACbA,KADa;AAAA,YACNC,IADM,wBACNA,IADM;AAErB,iCACKa,KADL;AAEEjB,UAAAA,OAAO,EAAE,KAFX;AAGEE,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAALA,KADI;AACGC,YAAAA,IAAI,EAAJA;AADH;AAHR;AAOD;;AACD,SAAKG,gBAAL;AAAuB;AACrB,iCACKU,KADL;AAEEjB,UAAAA,OAAO,EAAE,KAFX;AAGEC,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD;AAAS;AACP,iCAAYgB,KAAZ;AACD;AA3BH;AA6BD,CA9BD;;AAgCA,eAAeD,YAAf","sourcesContent":["import axios from 'axios';\r\n\r\nfunction getPostAPI(postId) {\r\n  // console.log(postId);\r\n  // return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\r\n  // return axios.get('../');\r\n}\r\n\r\nconst initialState = {\r\n  pending: false,\r\n  error: false,\r\n  data: {\r\n    title: '',\r\n    body: '',\r\n  },\r\n};\r\n\r\nconst GET_POST_PENDING = 'GET_POST_PENDING';\r\nconst GET_POST_SUCCESS = 'GET_POST_SUCCESS';\r\nconst GET_POST_FAILURE = 'GET_POST_FAILURE';\r\n\r\nexport const getPost = (postId) => (dispatch) => {\r\n  // 먼저, 요청이 시작했다는것을 알립니다\r\n  console.log('test');\r\n  dispatch({ type: GET_POST_PENDING });\r\n\r\n  // 요청을 시작합니다\r\n  // 여기서 만든 promise 를 return 해줘야, 나중에 컴포넌트에서 호출 할 때 getPost().then(...) 을 할 수 있습니다\r\n  return getPostAPI(postId).then(\r\n    (response) => {\r\n      // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\r\n      console.log(response);\r\n      dispatch({\r\n        type: GET_POST_SUCCESS,\r\n        payload: response,\r\n      });\r\n    },\r\n  ).catch((error) => {\r\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\r\n    console.log(error);\r\n    dispatch({\r\n      type: GET_POST_FAILURE,\r\n      payload: error,\r\n    });\r\n  });\r\n};\r\n\r\nconst handleAction = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_POST_PENDING: {\r\n      return {\r\n        ...state,\r\n        pending: true,\r\n        error: false,\r\n      };\r\n    }\r\n    case GET_POST_SUCCESS: {\r\n      const { title, body } = action.payload.data;\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        data: {\r\n          title, body,\r\n        },\r\n      };\r\n    }\r\n    case GET_POST_FAILURE: {\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: true,\r\n      };\r\n    }\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n};\r\n\r\nexport default handleAction;\r\n"]},"metadata":{},"sourceType":"module"}